# -*- coding: utf-8 -*-
"""exercicio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ygkminli32W_18Ku2RZjnu1e1QWb38E8

# Exercicios
"""

import math

# Exercício 1 - Crie uma lista de 3 elementos e calcule a terceira potência de cada elemento.
l1 = [5,23,45]
l2 = [67,34,98]
l3 = [15,26,68]

# Usando função:
def potencia(x):
  return math.pow(x,3)

#Usando Lambda:
potencia = lambda x: math.pow(x,3)


print(f'L1: {(list(map(potencia,l1)))}')
print(f'L2: {(list(map(potencia,l2)))}')
print(f'L3: {(list(map(potencia,l3)))}')

# Exercício 2 - Reescreva o código abaixo, usando a função map(). O resultado final deve ser o mesmo!
palavras = 'A Data Science Academy oferce os melhores cursos de análise de dados do Brasil.'.split()
print(palavras)
resultado = [[w.upper(), w.lower(), len(w)] for w in palavras]
for i in resultado:
    print (i)

# Solução

from operator import itemgetter

print(palavras)

def para_maiusculas(palavra):
  """Converte a palavra para maiúsculas."""
  return palavra.upper()

def para_minusculas(palavra):
  """Converte a palavra para minúsculas."""
  return palavra.lower()

def tamanho_palavra(palavra):
  """Obtém o tamanho da palavra."""
  return len(palavra)

# Converter todas as palavras para maiúsculas
palavras_maiusculas = map(para_maiusculas, palavras)

# Converter todas as palavras para minúsculas
palavras_minusculas = map(para_minusculas, palavras)

# Obter o tamanho de cada palavra
tamanhos_palavras = map(tamanho_palavra, palavras)

resultado = list(zip(palavras_maiusculas, palavras_minusculas, tamanhos_palavras))

for palavra_maiuscula, palavra_minuscula, tamanho in resultado:
  print(f"[ {palavra_maiuscula}, {palavra_minuscula}, {tamanho} ]")

# Exercício 3 - Calcule a matriz transposta da matriz abaixo.
# Caso não saiba o que é matriz transposta, visite este link: https://pt.wikipedia.org/wiki/Matriz_transposta
# Matriz transposta é um conceito fundamental na construção de redes neurais artificiais, base de sistemas de IA.

matrix = [[1, 2],[3,4],[5,6],[7,8]]
list(matrix)

# Exercício 4 - Crie duas funções, uma para elevar um número ao quadrado e outra para elevar ao cubo.
# Aplique as duas funções aos elementos da lista abaixo.
# Obs: as duas funções devem ser aplicadas simultaneamente.
import math

lista = [0, 1, 2, 3, 4, 5]

def potenciaa():
    potencia = lambda x: math.pow(x,2)
    return (list(map(potencia, lista)))

def elevado_cubo():
    elevado_ao_cubo = lambda y: math.pow(y,3)
    return (list(map(elevado_ao_cubo, lista)))


resultado = zip(potenciaa(), elevado_cubo())
print(list(resultado))

# Exercício 5 - Abaixo você encontra duas listas. Faça com que cada elemento da listaA seja elevado
# ao elemento correspondente na listaB.
listaA = [2, 3, 4]
listaB = [10, 11, 12]

list(list(zip(listaA,listaB)))
lista_elevada = list(map(lambda x,y: x**y, listaA, listaB))

for i in enumerate(lista_elevada):
  print(i)

# Exercício 6 - Considerando o range de valores abaixo, use a função filter() para retornar
# apenas os valores negativos.
def is_negative(x):
  return x < 0

filtered_numbers = list(filter(is_negative, range(-5, 5)))
print(filtered_numbers)

# Exercício 7 - Usando a função filter(), encontre os valores que são comuns às duas listas abaixo.
a = [1,2,3,5,7,9]
b = [2,3,5,6,7,8]

list(filter(lambda x: x in a, b))

# Exercício 8 - Considere os dois dicionários abaixo.
# Crie um terceiro dicionário com as chaves do dicionário 1 e os valores do dicionário 2.
dict1 = {'a':1,'b':2}
dict2 = {'c':4,'d':5}

dict3  = {**dict1, **dict2}
print(dict3)

# Exercício 9 - Considere a lista abaixo e retorne apenas os elementos cujo índice for maior que 5.

lista = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

for i in enumerate(lista[:6]):
  print([i])

# Exercício 10 - Crie um regex em Python para extrair a palavra que aparece depois das palavras
# Data e Science na frase: 'A Data Science Academy oferce os melhores cursos de análise de dados do Brasil.'
import re

texto = 'A Data Science Academy oferece os melhores cursos de análise de dados do Brasil.'
regex = r"Data Science\s+(\w+)(?:$|\b)"

resultado = re.search(regex, texto)
print(resultado.group(1))